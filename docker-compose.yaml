version: '3'

services:
  # Kafka and ZooKeeper for streaming data
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - data-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - data-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "9482:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - data-network

  # Spark for processing
  spark-master:
    image: bitnami/spark:3.3.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - data-network
    volumes:
      - ./data:/data
      - ./src:/src
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    user: "root"  
    command: >
      bash -c "
        mkdir -p /data/bronze/customers /data/bronze/orders /data/silver /data/gold &&
        chmod -R 777 /data &&
        chown -R 1000:1000 /data &&
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "
    # The above command creates the necessary directories and sets permissions
    # before starting the Spark master process.

  spark-worker:
    image: bitnami/spark:3.3.1
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8081:8081"
    depends_on:
      - spark-master
    networks:
      - data-network
    volumes:
      - ./data:/data
      - ./src:/src
    user: "root"
    command: >
      bash -c "
        mkdir -p /data/bronze/customers /data/bronze/orders /data/silver /data/gold &&
        chmod -R 777 /data &&
        chown -R 1000:1000 /data &&
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "



  # Airflow for orchestration
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-webserver
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW_CONN_SPARK_DEFAULT=spark://spark-master:7077
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=j1Wl44yYMIAkmioF4QJcdQapOOaVRkadq8rOOT5USwA=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - ADDITIONAL_PYTHON_PACKAGES=apache-airflow-providers-apache-spark==4.1.0
      - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    volumes:
      - ./src/orchestration/dags:/opt/airflow/dags
      - ./src/orchestration/plugins:/opt/airflow/plugins
      - ./logs:/opt/airflow/logs
      - ./data:/data
      - ./src:/src
    user: "root"
    ports:
      - "8088:8080"
    command: webserver
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-scheduler
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=j1Wl44yYMIAkmioF4QJcdQapOOaVRkadq8rOOT5USwA=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW_CONN_SPARK_DEFAULT=spark://spark-master:7077
      - ADDITIONAL_PYTHON_PACKAGES=apache-airflow-providers-apache-spark==4.1.0
      - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    volumes:
      - ./src/orchestration/dags:/opt/airflow/dags
      - ./src/orchestration/plugins:/opt/airflow/plugins
      - ./logs:/opt/airflow/logs
      - ./data:/data
      - ./src:/src
    user: "root"

    command: scheduler
    networks:
      - data-network

  # Great Expectations for data quality
  great-expectations:
    image: python:3.9
    container_name: great-expectations
    volumes:
      - ./src/etl/great_expectations:/great_expectations
      - ./data:/data
    networks:
      - data-network
    command: tail -f /dev/null

  # MinIo data lake : 
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - data-network

  # Metabase for visualization
  metabase:
    image: metabase/metabase:v0.44.6
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=5432
      - MB_DB_USER=airflow
      - MB_DB_PASS=airflow
      - MB_DB_HOST=postgres
    depends_on:
      - postgres
    networks:
      - data-network

  # Monitoring stack ( Prometheus, Grafana )
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - data-network

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - data-network

  # dbt for data modeling : 
  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.4.1
    container_name: dbt
    volumes:
      - ./src/etl/dbt:/dbt
    networks:
      - data-network


networks:
  data-network:
    driver: bridge

volumes:
  postgres-db-volume:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  minio-data:
  prometheus-data:
  grafana-data:
  data-volume:
    driver: local
  